#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static Boolean.parseBoolean
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName
import static com.ericsson.orchestration.mgmt.libs.VnfmGerrit.getLatestTag


// Stages template
def stages = [:]
// Set Agent label
env.SEED_JOB = getSeedJobName(JOB_NAME)
String label = getAgentLabel( type: 'post-merge',
                              project: env.SEED_JOB,
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.JOB_TYPE = 'post-merge'
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'
        env.GERRIT_BRANCH = 'master'


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['git'] = load(env.GIT_STAGE)
            stages['envs'] = load(env.ENVS_STAGE)
            stages['quality-tests'] = load(env.QUALITY_TESTS_STAGE)
            stages['sonar'] = load(env.SONAR_STAGE)
            stages['clean'] = load(env.CLEAN_STAGE)
            if(!parseBoolean(env.SKIP_UNIT_TESTS) || !parseBoolean(env.SKIP_E2E_TESTS)) {
                stages['unit-tests'] = load(env.UNIT_TESTS_STAGE)
            }

            env.PROJECT_TAG = getLatestTag( project: env.GERRIT_PROJECT,
                                            url: env.GERRIT_URL,
                                            this)
            println('INFO: Latest tag is ' + env.PROJECT_TAG)
        }

        // Run Checkout Project Stage
        stages['git'].CheckoutProject(project: env.GERRIT_PROJECT,
                                      branch: env.GERRIT_BRANCH,
                                      type: 'tag',
                                      tag: env.PROJECT_TAG)

        // Run Update Job ENVs Stage
        stages['envs'].Update(project: env.GERRIT_PROJECT)

        if(!parseBoolean(env.SKIP_UNIT_TESTS)) {
            // Run Unit Tests Stage
            stages['unit-tests'].MavenUnitTests(project: env.GERRIT_PROJECT)
        }

        if(!parseBoolean(env.SKIP_E2E_TESTS)) {
            // Run End-to-End Tests Stage
            stages['unit-tests'].MavenE2ETests(project: env.GERRIT_PROJECT)
        }

        // Run Coverage Test Stage
        stages['quality-tests'].CoverageTest(project: env.GERRIT_PROJECT)

        // Run Sonar Analysis Stage
        stages['sonar'].Analysis( project: env.GERRIT_PROJECT,
                                  pom: env.POM_FILE,
                                  abort: false)

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Clean Stage
        stages['clean'].CleanBuild()
    }
}