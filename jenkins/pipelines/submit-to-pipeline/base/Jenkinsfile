#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static Boolean.parseBoolean
import static com.ericsson.orchestration.mgmt.libs.VnfmGerrit.listReviews
import static com.ericsson.orchestration.mgmt.libs.VnfmGerrit.rebaseChange
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'concurrent',
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.SEED_JOB = getSeedJobName(JOB_NAME)
        env.JOB_TYPE = 'pre-release'
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'
        env.GERRIT_BRANCH = env.GERRIT_BRANCH
        env.GERRIT_REFSPEC = env.GERRIT_REFSPEC
        env.GERRIT_CHANGE_NUMBER = env.GERRIT_CHANGE_NUMBER
        env.GERRIT_URL = env.GERRIT_CHANGE_URL ? env.GERRIT_CHANGE_URL.minus('/' + env.GERRIT_CHANGE_NUMBER) : ''
        env.GERRIT_CHANGE_URL = env.GERRIT_CHANGE_URL
        env.GERRIT_CHANGE_SUBJECT = params.GERRIT_CHANGE_SUBJECT
        env.GERRIT_TOPIC = env.GERRIT_TOPIC
        env.EVNFM_BRANCH = env.GERRIT_BRANCH
        env.SKIP_TESTNG = env.GERRIT_TOPIC == 'skip-testng' || env.SEED_JOB == 'batch-manager'


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['git'] = load(env.GIT_STAGE)
            stages['jobs'] = load(env.JOBS_STAGE)
            stages['run-job'] = load(env.RUN_JOB_STAGE)
            stages['clean'] = load(env.CLEAN_STAGE)

            println('INFO: Check Verified label...')
            Map reviews = listReviews(number: env.GERRIT_CHANGE_NUMBER,
                                      url: env.GERRIT_URL,
                                      this)
            String message
            switch(true) {
                case '-1' in reviews['Verified']['value']:
                    message = 'ERROR: Change has "-1" for "Verified" label'
                    error(message: message)
                break
                case env.GERRIT_CHANGE_SUBJECT[0..7] != 'JENKINS-' && !('+1' in reviews['Verified']['value']):
                    message = 'ERROR: Change has no "+1" for "Verified" label'
                    error(message: message)
                break
            }

            println('INFO: Rebase Change...')
            env.GERRIT_REFSPEC = rebaseChange(number: env.GERRIT_CHANGE_NUMBER,
                                              url: env.GERRIT_URL,
                                              this)
        }

        if(!parseBoolean(env.SKIP_PRERELEASE)) {
            // Run Set Job Parameter Stage
            stages['jobs'].SetJobParameter( name: 'PRE_RELEASE_PARAMS',
                                            job: 'pre-release',
                                            stage: 'Set Pre-Release parameters')

            // Run Pre-Release Job
            stages['run-job'].LocalJob( name: env.SEED_JOB + '_pre-release',
                                        params: evaluate(env.PRE_RELEASE_PARAMS),
                                        stage: 'Pre-Release Job')
        }

        // Run Submit stage
        stages['git'].SubmitChange( number: env.GERRIT_CHANGE_NUMBER,
                                    url: env.GERRIT_URL)

        // Run Set Job Parameter Stage
        stages['jobs'].SetJobParameter( name: 'RELEASE_PARAMS',
                                        job: 'release',
                                        stage: 'Set Release parameters')

        // Run Release Job
        stages['run-job'].LocalJob( name: env.SEED_JOB + '_release-flow',
                                    params: evaluate(env.RELEASE_PARAMS),
                                    artifact: 'artifact.properties',
                                    stage: 'Release Job')

        if(!parseBoolean(env.SKIP_POST_MERGE) && env.GERRIT_BRANCH == 'master') {
            // Run Post-Merge Job
            stages['run-job'].LocalJob( name: env.SEED_JOB + '_post-merge',
                                        stage: 'Post-Merge Job',
                                        wait: false)
        }

        if(!parseBoolean(env.SKIP_HELMFILE)) {
            // Run Set Job Parameter Stage
            Boolean helmfileReleaseSkip = !(env.GERRIT_BRANCH.contains('_track'))
            String releaseArt = env.ARTIFACTS_DIR + '/Release Job.artifact'
            stages['jobs'].SetJobParameter( name: 'HELMFILE_RELEASE_PARAMS',
                                            job: 'helmfile-release',
                                            artifact: releaseArt,
                                            stage: 'Set Helmfile Release parameters',
                                            skip: helmfileReleaseSkip)

            // Run Job Helmfile Release
            stages['run-job'].LocalJob( name: env.HELMFILE_RELEASE_JOB,
                                        params: evaluate(env.HELMFILE_RELEASE_PARAMS),
                                        artifact: 'artifact.properties',
                                        skip: helmfileReleaseSkip)
        }

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Clean Stage
        stages['clean'].CleanBuild()
    }
}