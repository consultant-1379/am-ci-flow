#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static com.ericsson.orchestration.mgmt.libs.VnfmGerrit.listReviews
import static com.ericsson.orchestration.mgmt.libs.VnfmGerrit.rebaseChange
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'concurrent',
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.SEED_JOB = getSeedJobName(JOB_NAME)
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'
        env.GERRIT_BRANCH = env.GERRIT_BRANCH
        env.JOB_TYPE = env.GERRIT_BRANCH.contains('_track') ? 'pointfix' : 'pre-release'
        env.GERRIT_REFSPEC = env.GERRIT_REFSPEC
        env.GERRIT_CHANGE_NUMBER = env.GERRIT_CHANGE_NUMBER
        env.GERRIT_CHANGE_URL = env.GERRIT_CHANGE_URL
        env.GERRIT_CHANGE_SUBJECT = params.GERRIT_CHANGE_SUBJECT
        env.GERRIT_URL = env.GERRIT_CHANGE_URL ? env.GERRIT_CHANGE_URL.minus('/' + env.GERRIT_CHANGE_NUMBER) : ''
        env.GERRIT_PATCHSET_NUMBER = env.GERRIT_PATCHSET_NUMBER
        env.GERRIT_TOPIC = env.GERRIT_TOPIC
        env.GIT_COMMIT_AUTHOR = env.GERRIT_CHANGE_OWNER_NAME
        env.GIT_COMMIT_AUTHOR_EMAIL = env.GERRIT_CHANGE_OWNER_EMAIL
        env.GIT_COMMIT_SUMMARY = env.GERRIT_CHANGE_SUBJECT
        env.APP_NAME = 'eric-eo-evnfm'
        env.SKIP_TESTNG = env.GERRIT_TOPIC == 'skip-testng'


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['jobs'] = load(env.JOBS_STAGE)
            stages['run-job'] = load(env.RUN_JOB_STAGE)
            stages['git'] = load(env.GIT_STAGE)

            println('INFO: Check Verified label...')
            Map reviews = listReviews(number: env.GERRIT_CHANGE_NUMBER,
                                      url: env.GERRIT_URL,
                                      this)
            String message
            switch(true) {
                case '-1' in reviews['Verified']['value']:
                    message = 'ERROR: Change has "-1" for "Verified" label'
                    error(message: message)
                break
                case env.GERRIT_CHANGE_SUBJECT[0..7] != 'JENKINS-' && !('+1' in reviews['Verified']['value']):
                    message = 'ERROR: Change has no "+1" for "Verified" label'
                    error(message: message)
                break
            }

            println('INFO: Rebase Change...')
            env.GERRIT_REFSPEC = rebaseChange(number: env.GERRIT_CHANGE_NUMBER,
                                              url: env.GERRIT_URL,
                                              this)
        }

        // Run Set Job Parameter Stage
        stages['jobs'].SetJobParameter( name: 'PRE_RELEASE_PARAMS',
                                        job: 'evnfm-prerelease',
                                        stage: 'Set Pre-Release parameters')

        // Run Pre-Release Job
        stages['run-job'].LocalJob( name: env.PRE_RELEASE_JOB,
                                    params: evaluate(env.PRE_RELEASE_PARAMS))

        // Run Check Submit Status Stage
        stages['git'].CheckSubmitStatus(number: env.GERRIT_CHANGE_NUMBER,
                                        url: env.GERRIT_URL)

        // Run Set Spinnaker Job Parameter
        Boolean skipSpin = env.GERRIT_TOPIC == 'skip-release' ? true : false
        skipSpin = env.GERRIT_BRANCH != 'master' ? true : skipSpin
        stages['jobs'].SetSpinnakerParameter( name: 'SPINNAKER_PARAMS',
                                              job: 'evnfm-release',
                                              skip: skipSpin)

        // Trigger Spinnaker Job
        stages['run-job'].SpinnakerJob( hook: env.SPINNNAKER_HOOK_NAME,
                                        params: evaluate(env.SPINNAKER_PARAMS),
                                        skip: skipSpin)

        // Run Submit stage
        Boolean skipSubmit = !skipSpin
        stages['git'].SubmitChange( number: env.GERRIT_CHANGE_NUMBER,
                                    url: env.GERRIT_URL,
                                    skip: skipSubmit)

        // Run Set Job Parameter Stage
        Boolean skipRelease = env.JOB_TYPE != 'pointfix'
        stages['jobs'].SetJobParameter( name: 'RELEASE_PARAMS',
                                        job: 'release',
                                        stage: 'Set Release parameters',
                                        skip: skipRelease)

        // Run Release Job
        stages['run-job'].LocalJob( name: env.RELEASE_JOB,
                                    params: evaluate(env.RELEASE_PARAMS),
                                    artifact: 'artifact.properties',
                                    stage: 'Release Job',
                                    skip: skipRelease)

    } catch(Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        cleanWs()
    }
}