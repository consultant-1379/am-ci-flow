#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static Boolean.parseBoolean
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'unit-tests',
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.SEED_JOB = getSeedJobName(JOB_NAME)
        env.JOB_TYPE = 'gerrit'
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'
        env.GERRIT_BRANCH = params.GERRIT_BRANCH ?: 'master'
        env.GERRIT_REFSPEC = params.GERRIT_REFSPEC ?: 'refs/heads/master'


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['git'] = load(env.GIT_STAGE)
            stages['envs'] = load(env.ENVS_STAGE)
            stages['helm'] = load(env.HELM_STAGE)
            stages['clean'] = load(env.CLEAN_STAGE)
            // Build Stages
            if(!parseBoolean(env.SKIP_BUILD)) {
                stages['build'] = load(env.BUILD_STAGE)
            }
            // Docker Stages
            if(!parseBoolean(env.SKIP_BUILD_IMAGE_TEST)) {
                stages['docker'] = load(env.DOCKER_STAGE)
            }
        }

        // Run Checkout Project Stage
        stages['git'].CheckoutProject(project: env.GERRIT_PROJECT,
                                      branch: env.GERRIT_BRANCH,
                                      refspec: env.GERRIT_REFSPEC,
                                      type: 'change')

        if(!parseBoolean(env.SKIP_VALIDATE_CHART_SCHEMA)) {
            // Run Checkout Project Stage
            stages['git'].CheckoutProject(project: env.OSS_CI_PROJECT,
                                          branch: env.OSS_CI_BRANCH)
        }

        // Run Update Job ENVs Stage
        stages['envs'].Update(project: env.GERRIT_PROJECT)

        if(!parseBoolean(env.SKIP_BUILD)) {
            // Run Build Stage
            stages['build'].BuildMaven(project: env.GERRIT_PROJECT)
        }

        if(!parseBoolean(env.SKIP_BUILD_IMAGE_TEST)) {
            // Run Build Image Stage
            stages['docker'].BuildImage(name: env.GERRIT_PROJECT)
        }

        if(!parseBoolean(env.SKIP_VALIDATE_CHART_SCHEMA)) {
            // Run Validate Helm Chart Schema Stage
            stages['helm'].ValidateChartSchema(env.GERRIT_PROJECT)
        }

        // Run Package Helm Chart Stage
        stages['helm'].PackageChart(project: env.GERRIT_PROJECT,
                                    version: env.CHART_VERSION,
                                    upload: false)

        if(!parseBoolean(env.SKIP_DR_CHECK)) {
            // Run Design Rule Check Stage
            stages['helm'].DesignRuleCheck(project: env.GERRIT_PROJECT)
        }

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Clean Stage
        stages['clean'].CleanBuild()
    }
}