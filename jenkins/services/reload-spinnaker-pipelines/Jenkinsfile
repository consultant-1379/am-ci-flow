#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'ews',
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.SEED_JOB = getSeedJobName(JOB_NAME)
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['job'] = load(env.JOBS_STAGE)
            stages['clean'] = load(env.CLEAN_STAGE)
        }

        // Run Create Spinnaker EVNFM Jobs
        String evnfmPath = 'spinnaker/' + env.SPINNAKER_EVNFM_PATH
        String evnfmFile = evnfmPath + '/jobs.yaml'
        for(def evnfmJob in readYaml(file: evnfmFile)) {
            stages['job'].CreateSpinnakerJob( name: evnfmJob['name'],
                                              project: evnfmJob['project'],
                                              template: evnfmJob['template'],
                                              path: evnfmPath + '/templates',
                                              configs: evnfmJob['configs'])
        }

        // Run Create Spinnaker OFOC Jobs
        String ofocPath = 'spinnaker/' + env.SPINNAKER_OFOC_PATH
        String ofocFile = ofocPath + '/jobs.yaml'
        for(def ofocJob in readYaml(file: ofocFile)) {
            stages['job'].CreateSpinnakerJob( name: ofocJob['name'],
                                              project: ofocJob['project'],
                                              template: ofocJob['template'],
                                              path: ofocPath + '/templates',
                                              configs: ofocJob['configs'])
        }

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Clean Stage
        stages['clean'].CleanBuild()
    }
}