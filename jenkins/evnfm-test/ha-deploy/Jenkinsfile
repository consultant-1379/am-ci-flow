#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'concurrent',
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.JOB_TYPE = 'ha-tests'
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/evnfm-test/project.var'
        env.FLOW_URL_TAG = 'CVNFM HA Basic tests'
        env.ENV_LABEL = params.ENV_LABEL
        env.EO_HELMFILE_BASE_VERSION = params.EO_HELMFILE_BASE_VERSION
        env.PATH_TO_SITE_VALUES_OVERRIDE_FILE = params.PATH_TO_SITE_VALUES_OVERRIDE_FILE


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['jobs'] = load(env.JOBS_STAGE)
            stages['run-job'] = load(env.RUN_JOB_STAGE)
            stages['post'] = load(env.POST_STAGE)
        }

        // Run Set Job Parameter Stage
        stages['jobs'].SetJobParameter( name: 'RESERVE_ENV_PARAMS',
                                        job: 'reserve-env',
                                        stage: 'Set Reserve Env parameters')

        // Run Reserve Env Job
        stages['run-job'].LocalJob( name: env.RESERVE_ENV_JOB,
                                    params: evaluate(env.RESERVE_ENV_PARAMS),
                                    artifact: 'artifact.properties')

        // Run Set Job Parameter Stage
        env.RESERVE_ART = env.ARTIFACTS_DIR + '/' + env.RESERVE_ENV_JOB + '.artifact'
        stages['jobs'].SetJobParameter( name: 'CLEAN_RESOURCE_NAME',
                                        job: 'resource-name',
                                        artifact: env.RESERVE_ART,
                                        stage: 'Set Clean Resource name parameter')

        // Run Set Job Parameter Stage
        stages['jobs'].SetJobParameter( name: 'INSTALL_PARAMS',
                                        job: 'helmfile-install',
                                        stage: 'Set Install parameters')

        // Run Helmfile Instal Stage
        env.INSTALL_ART = 'install.artifact'
        stages['run-job'].LocalJob( name: env.HELMFILE_DEPLOY_JOB,
                                    params: evaluate(env.INSTALL_PARAMS),
                                    artifact: 'artifact.properties',
                                    artifactName: env.INSTALL_ART,
                                    stage: 'Helmfile Install')

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Post Actions Stage
        stages['post'].HaDeploy(status: currentBuild.result ?: 'SUCCESS')
    }
}