#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'gerrit',
                              topic: params.GERRIT_TOPIC,
                              this)
String testsLabel = getAgentLabel(type: 'unit-tests',
                                  topic: params.GERRIT_TOPIC,
                                  this)


node(label) {
    try {
        // Set Job's ENVs
        env.SEED_JOB = getSeedJobName(JOB_NAME)
        env.JOB_TYPE = 'gerrit'
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'
        env.GERRIT_BRANCH = params.GERRIT_BRANCH ?: 'master'
        env.GERRIT_REFSPEC = params.GERRIT_REFSPEC ?: 'refs/heads/master'


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['git'] = load(env.GIT_STAGE)
            stages['build'] = load(env.BUILD_STAGE)
            stages['unit-tests'] = load(env.UNIT_TESTS_STAGE)
            stages['quality-tests'] = load(env.QUALITY_TESTS_STAGE)
            stages['sonar'] = load(env.SONAR_STAGE)
            stages['clean'] = load(env.CLEAN_STAGE)
        }

        // Run Checkout Project Stage
        stages['git'].CheckoutProject(project: env.GERRIT_PROJECT,
                                      branch: env.GERRIT_BRANCH,
                                      refspec: env.GERRIT_REFSPEC,
                                      type: 'change')

        // Run Build Stage
        stages['build'].BuildMaven(project: env.GERRIT_PROJECT)

        parallel(
            'Unit Tests' : {
                node(testsLabel) {
                    // Run Checkout Project Stage
                    stages['git'].CheckoutProject(project: env.GERRIT_PROJECT,
                                                  branch: env.GERRIT_BRANCH,
                                                  refspec: env.GERRIT_REFSPEC,
                                                  type: 'change')

                    // Run Unit Tests Stage
                    stages['unit-tests'].MavenUnitTests(project: env.GERRIT_PROJECT)

                    // Copy test files
                    dir(env.REPORT_PATH) {
                        stash(name: 'UnitTests',
                              includes: '*.exec')
                    }

                    // Run Clean Agent Stage
                    stages['clean'].CleanBuild(stage: 'Clean test agent')
                }

                // Paste test files
                dir(env.REPORT_PATH) {
                    unstash('UnitTests')
                }
            },
            'Contracts Tests' : {
                node(testsLabel) {
                    // Run Checkout Project Stage
                    stages['git'].CheckoutProject(project: env.GERRIT_PROJECT,
                                                  branch: env.GERRIT_BRANCH,
                                                  refspec: env.GERRIT_REFSPEC,
                                                  type: 'change')

                    // Run Contracts Tests Stage
                    stages['unit-tests'].MavenContractsTests(project: env.GERRIT_PROJECT)

                    // Copy test files
                    dir(env.REPORT_PATH) {
                        stash(name: 'ContractsTests',
                              includes: '*.exec')
                    }

                    // Run Clean Agent Stage
                    stages['clean'].CleanBuild(stage: 'Clean test agent')
                }

                // Paste test files
                dir(env.REPORT_PATH) {
                    unstash('ContractsTests')
                }
            },
            'End-to-End Tests': {
                node(testsLabel) {
                    // Run Checkout Project Stage
                    stages['git'].CheckoutProject(project: env.GERRIT_PROJECT,
                                                  branch: env.GERRIT_BRANCH,
                                                  refspec: env.GERRIT_REFSPEC,
                                                  type: 'change')

                    // Run End-to-End Tests Stage
                    stages['unit-tests'].MavenE2ETests(project: env.GERRIT_PROJECT)

                    // Copy test files
                    dir(env.REPORT_PATH) {
                        stash(name: 'End-to-EndTests',
                              includes: '*.exec')
                    }

                    // Run Clean Agent Stage
                    stages['clean'].CleanBuild(stage: 'Clean test agent')
                }

                // Paste test files
                dir(env.REPORT_PATH) {
                    unstash('End-to-EndTests')
                }
            }
        )

        // Run Coverage Test Stage
        stages['quality-tests'].CoverageTest(project: env.GERRIT_PROJECT)

        // Run Sonar Analysis Stage
        stages['sonar'].Analysis(project: env.GERRIT_PROJECT)

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Clean Stage
        stages['clean'].CleanBuild()
    }
}