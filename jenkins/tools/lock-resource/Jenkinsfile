#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static Boolean.parseBoolean
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'concurrent',
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.SEED_JOB = getSeedJobName(JOB_NAME)
        env.SHORT_JOB_NAME = JOB_NAME.minus(env.SEED_JOB + '_')
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'
        env.ENV_LABEL = params.ENV_LABEL
        env.SKIP_QUEUE = params.SKIP_QUEUE
        env.FLOW_URL_TAG = params.FLOW_URL_TAG
        env.FLOW_URL = params.FLOW_URL
        env.WAIT_TIME = params.WAIT_TIME


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['envs'] = load(env.ENVS_STAGE)
            stages['post'] = load(env.POST_STAGE)
        }

        // Run Lock Environment Stage
        stages['envs'].LockEnv( name: env.ENV_LABEL,
                                queue: !parseBoolean(env.SKIP_QUEUE))

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Post Actions Stage
        stages['post'].ServiceJob(name: env.SHORT_JOB_NAME,
                                  status: currentBuild.result ?: 'SUCCESS')
    }
}