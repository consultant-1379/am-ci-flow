#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static Boolean.parseBoolean
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'gerrit-docker',
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.SEED_JOB = getSeedJobName(JOB_NAME)
        env.JOB_TYPE = 'gerrit'
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'
        env.GERRIT_PROJECT = params.GERRIT_PROJECT
        env.GERRIT_BRANCH = params.GERRIT_BRANCH
        env.GERRIT_REFSPEC = params.GERRIT_REFSPEC
        env.UPLIFT_DEPENDENCY = params.UPLIFT_DEPENDENCY
        env.UPLIFT_CHART_NAME = params.UPLIFT_CHART_NAME
        env.UPLIFT_CHART_VERSION = params.UPLIFT_CHART_VERSION
        env.UPLIFT_CHART_FILE = params.UPLIFT_CHART_FILE


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['git'] = load(env.GIT_STAGE)
            stages['envs'] = load(env.ENVS_STAGE)
            stages['helm'] = load(env.HELM_STAGE)
            stages['clean'] = load(env.CLEAN_STAGE)
        }

        // Run Checkout Project Stage
        stages['git'].CheckoutProject(project: env.GERRIT_PROJECT,
                                      branch: env.GERRIT_BRANCH,
                                      refspec: env.GERRIT_REFSPEC,
                                      type: 'change')

        // Run Update Job ENVs Stage
        stages['envs'].Update(project: env.GERRIT_PROJECT)

        // Run Uplift Dependency Stage
        stages['helm'].UpliftDependency(name: env.UPLIFT_CHART_NAME,
                                        version: env.UPLIFT_CHART_VERSION,
                                        project: env.GERRIT_PROJECT,
                                        file: env.UPLIFT_CHART_FILE,
                                        skip: !parseBoolean(env.UPLIFT_DEPENDENCY))

        // Run Package Helm Chart Stage
        stages['helm'].PackageChart(project: env.GERRIT_PROJECT,
                                    upload: false)

        // Run Design Rule Check Stage
        stages['helm'].DesignRuleCheck(project: env.GERRIT_PROJECT)

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Clean Stage
        stages['clean'].CleanBuild()
    }
}