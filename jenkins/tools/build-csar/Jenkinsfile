#!/usr/bin/env groovy

@Library('jenkins-shared-libs')
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getAgentLabel
import static com.ericsson.orchestration.mgmt.libs.VnfmJenkins.getSeedJobName


// Stages template
def stages = [:]
// Set Agent label
String label = getAgentLabel( type: 'gerrit-docker',
                              this)


node(label) {
    try {
        // Set Job's ENVs
        env.SEED_JOB = getSeedJobName(JOB_NAME)
        env.GLOBAL_VAR_PATH = 'jenkins/global.var'
        env.VAR_PATH = 'jenkins/' + env.SEED_JOB + '/project.var'
        env.CHART_NAME = params.CHART_NAME
        env.CHART_VERSION = params.CHART_VERSION
        env.TYPE = params.TYPE


        // Run Prepare Stage
        stage('Prepare') {
            println('INFO: Checkout CI code...')
            checkout(scm)

            println('INFO: Load Global vars...')
            load(env.GLOBAL_VAR_PATH)

            println('INFO: Load Project vars...')
            load(env.VAR_PATH)

            println('INFO: Load Stages...')
            stages['git'] = load(env.GIT_STAGE)
            stages['helm'] = load(env.HELM_STAGE)
            stages['build'] = load(env.BUILD_STAGE)
            stages['clean'] = load(env.CLEAN_STAGE)
        }

        // Run Download Helm Chart Stage
        stages['helm'].DownloadHelmChart( dir: env.WORKSPACE,
                                          project: env.CHART_NAME,
                                          version: env.CHART_VERSION)

        // Run Build CSAR Stage
        stages['build'].BuildCSAR(dir: env.WORKSPACE,
                                  type: env.TYPE,
                                  chart: env.CHART_NAME,
                                  version: env.CHART_VERSION)

    } catch (Exception errJob) {
        println(errJob)
        currentBuild.result = 'FAILURE'
    } finally {
        // Run Post Actions stage
        stage('Post Actions') {
            env.BUILD_STATUS = currentBuild.result ? currentBuild.result : 'SUCCESS'

            // Save tests' results
            archiveArtifacts( artifacts: '*.csar ',
                              allowEmptyArchive: true)
        }

        // Run Clean Stage
        stages['clean'].CleanBuild()
    }
}